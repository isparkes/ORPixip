<?xml version="1.0"?>
<config>
  <Application>
    Pixip
  </Application>

  <PipelineList>
    <PixipPipe>
      <Active>True</Active>
    </PixipPipe>
  </PipelineList>

  <PixipPipe>
    <!-- Input Adapter -->
    <InputAdapter>
      <PInpAdapter>
        <ClassName>Pixip.PixipDBInputAdapter</ClassName>
        <BatchSize>5000</BatchSize>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select count(*) from mtn_billing_cdr</ValidateStatement>
        <RecordCountStatement>select count(*) from mtn_billing_cdr where FIELD3 is null</RecordCountStatement>
        <InitStatement>update mtn_billing_cdr set FIELD3 = '1' where FIELD3 is null</InitStatement>
        <RecordSelectStatement>select mtn_cdr_id,
                                      ANUMBER,
                                      BNUMBER,
                                      CALL_DATE,
                                      CALL_DURATION,
                                      CHARGE_MAIN_ACCT,
                                      CALL_TYPE,
                                      PARTNER_OPTR,
                                      FNF_IND,
                                      SERVICE_CLASS,
                                      TELESERVICE_CODE,
                                      TRAFFIC_TYPE,
                                      CHARGE_DA1,
                                      DA1_ACCT_BAL_BEFORE_CALL,
                                      DA1_ACCT_BAL_AFTER_CALL
                              from    mtn_billing_cdr r 
                              where   FIELD3 = '1'
        </RecordSelectStatement>
        <CommitStatement></CommitStatement>
        <RollbackStatement></RollbackStatement>
      </PInpAdapter>
    </InputAdapter>

    <!-- Processing Pipeline -->
    <Process>
      <!-- Perform number normalisation -->
      <NormalisationLookup>
        <ClassName>Pixip.Normalisation</ClassName>
        <DataCache>NormCache</DataCache>
        <BatchSize>5000</BatchSize>
      </NormalisationLookup>
      
      <!-- Look up the customer tariff -->
      <CustomerTariffLookup>
        <ClassName>Pixip.CustomerTariffLookup</ClassName>
        <DataCache>CustomerTariffCache</DataCache>
        <BatchSize>5000</BatchSize>
      </CustomerTariffLookup>
      
      <!-- Create the charge packets - done here to allow time splitting -->
      <ChargePacketCreation>
        <ClassName>Pixip.ChargePacketCreation</ClassName>
        <BatchSize>5000</BatchSize>
      </ChargePacketCreation>

      <!-- Lookup the time zone -->
      <TimeMatch>
        <ClassName>Pixip.TimeLookup</ClassName>
        <DataCache>TimeCache</DataCache>
        <BatchSize>5000</BatchSize>
      </TimeMatch>

      <!-- Lookup the destination -->
      <ZoneDestinationLookup>
        <ClassName>Pixip.ZoneLookup</ClassName>
        <DataCache>ZoneDestinationCache</DataCache>
        <BatchSize>5000</BatchSize>
      </ZoneDestinationLookup>

      <!-- Lookup the price group for the zone and time -->
      <PriceGroupMatch>
        <ClassName>Pixip.PriceLookup</ClassName>
        <DataCache>PriceCache</DataCache>
        <BatchSize>5000</BatchSize>
      </PriceGroupMatch>

      <!-- Perform main rating -->
      <Rating>
        <ClassName>Pixip.Rating</ClassName>
        <DataCache>RateCache</DataCache>
        <BatchSize>5000</BatchSize>
      </Rating>

      <!-- roll up inpacts -->
      <RateRounding>
        <ClassName>Pixip.RateRounding</ClassName>
        <BatchSize>5000</BatchSize>
      </RateRounding>

      <!-- take into account the original value before balances -->
      <CalculateOriginalCharge>
        <ClassName>Pixip.CalculateOriginalCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </CalculateOriginalCharge>

      <!-- compare our value with the calculated original value -->
      <CompareCharge>
        <ClassName>Pixip.CompareCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </CompareCharge>
      
      <!-- Dump Diagnostic Information -->
      <DumpFirst>
        <ClassName>OpenRate.process.Dump</ClassName>
        <Active>True</Active>
        <DumpType>All</DumpType>
        <DumpFilePath>Data/Pixip</DumpFilePath>
        <DumpFilePrefix>IP_VCP_</DumpFilePrefix>
        <DumpFileSuffix>.dump</DumpFileSuffix>
        <BatchSize>5000</BatchSize>
      </DumpFirst>
    </Process>

    <!-- Output Adapters -->
    <OutputAdapter>
      <CGoodOutAdapter>
        <ClassName>Pixip.PixipDBOutputAdapter</ClassName>
        <OutputName>GoodOutput</OutputName>
        <BatchSize>5000</BatchSize>
        <MaxSleep>50</MaxSleep>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select 1 from mtn_billing_cdr</ValidateStatement>
        <InitStatement>select 1 from mtn_billing_cdr</InitStatement>
        <RecordInsertStatement>update mtn_billing_cdr set FIELD3 = '2', FIELD4 =?, FIELD5 = ? where mtn_cdr_id=?</RecordInsertStatement>
        <CommitStatement>update mtn_billing_cdr set FIELD3 = '3' where FIELD3 = '2'</CommitStatement>
        <RollbackStatement>update mtn_billing_cdr set FIELD3 = '-1' where FIELD3 = '2'</RollbackStatement>
      </CGoodOutAdapter>
    </OutputAdapter>
  </PixipPipe>

  <Resource>
    <LogFactory>
      <ClassName>OpenRate.logging.LogFactory</ClassName>
      <Properties>logPixip.properties</Properties>
      <DefaultCategory>ConfigTest</DefaultCategory>
    </LogFactory>

    <ECI>
      <ClassName>OpenRate.configurationmanager.EventHandler</ClassName>
      <Port>8086</Port>
      <MaxConnection>2</MaxConnection>
      <SemaphoreFile>Semaphore/Semaphore.txt</SemaphoreFile>
    </ECI>

    <TransactionManagerFactory>
      <ClassName>OpenRate.transaction.TransactionManagerFactory</ClassName>
    </TransactionManagerFactory>

    <!-- Conversion Cache allows us to cache heavy coversion objects -->
    <ConversionCache>
      <ClassName>OpenRate.resource.ConversionCache</ClassName>
    </ConversionCache>

    <DataSourceFactory>
      <ClassName>OpenRate.resource.DataSourceFactory</ClassName>
      <DataSourceBuilder>
        <ClassName>OpenRate.db.C3P0DataSource</ClassName>
      </DataSourceBuilder>
      
      <DataSource>
        <mtn_poc_db>
          <db_url>jdbc:mysql://localhost/mtn_poc</db_url>
          <driver>com.mysql.jdbc.Driver</driver>
          <username>openrate</username>
          <password>openrate</password>
          <ValidationQuery>select 1 from dual</ValidationQuery>
          <InitQuery>select 1 from dual</InitQuery>
          <TestConnectionPeriod>60</TestConnectionPeriod>
        </mtn_poc_db>
      
        <PixipDB>
          <db_url>jdbc:mysql://localhost/PixipDB</db_url>
          <driver>com.mysql.jdbc.Driver</driver>
          <username>openrate</username>
          <password>openrate</password>
          <ValidationQuery>select 1 from dual</ValidationQuery>
          <InitQuery>select 1 from dual</InitQuery>
          <TestConnectionPeriod>60</TestConnectionPeriod>
        </PixipDB>
      </DataSource>
    </DataSourceFactory>

    <CacheFactory>
      <ClassName>OpenRate.resource.CacheFactory</ClassName>
      <ModuleName>CacheFactory</ModuleName>
      <CacheableClass>
        <!-- Number normalisation rules -->
        <NormCache>
          <ClassName>OpenRate.cache.RegexMatchCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <SelectStatement>select MAP_GROUP,BAND,NUMBER,OLD_PREFIX,NEW_PREFIX from NORM_MAP order by RANK</SelectStatement>
          <KeyFields>2</KeyFields>
        </NormCache>

        <!-- Number zoning -->
        <ZoneDestinationCache>
          <ClassName>OpenRate.cache.BestMatchCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <SelectStatement>SELECT MAP_GROUP, PREFIX, ZONE_RESULT, DESCRIPTION, CATEGORY FROM DESTINATION_MAP</SelectStatement>
        </ZoneDestinationCache>

        <!-- MSISDN -> tariff -->
        <CustomerTariffCache>
          <ClassName>OpenRate.cache.RegexMatchCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>mtn_poc_db</DataSource>
          <SelectStatement>select 'Default',MSISDN,SERVICE_CLASS_PACKAGE from mtn_msisdn_plan</SelectStatement>
          <KeyFields>1</KeyFields>
        </CustomerTariffCache>

        <!-- Time zoning -->
        <TimeCache>
          <ClassName>OpenRate.cache.TimeModelCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <ModelSelectStatement>select TIME_MODEL_NAME_IN,DAY_IN,FROM_IN,TO_IN,RESULT_OUT from TIME_MODEL_INTERVAL</ModelSelectStatement>
          <MappingSelectStatement>select PRODUCT_NAME_IN,TIME_MODEL_OUT from TIME_MODEL_MAP</MappingSelectStatement>
       </TimeCache>

        <!-- Price allocations -->
       <PriceCache>
          <ClassName>OpenRate.cache.RegexMatchCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <SelectStatement>select MAP_GROUP,ZONE_RESULT,TIME_RESULT,PRICE_GROUP from PRICE_MAP</SelectStatement>
        </PriceCache>

        <!-- Pricing definitions for normal rating -->
        <RateCache>
          <ClassName>OpenRate.cache.RUMRateCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <PriceModelStatement>select PRICE_MODEL,STEP,TIER_FROM,TIER_TO,BEAT,FACTOR,CHARGE_BASE from PRICE_MODEL</PriceModelStatement>
          <RUMMapStatement>select PRICE_GROUP,PRICE_MODEL,RUM,RESOURCE,RUM_TYPE,RESOURCE_ID,CONSUME_FLAG from RUM_MAP order by STEP</RUMMapStatement>
        </RateCache>

      </CacheableClass>
    </CacheFactory>

  </Resource>
</config>
