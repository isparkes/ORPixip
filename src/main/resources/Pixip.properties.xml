<?xml version="1.0"?>
<config>
  <Application>
    Pixip
  </Application>

  <PipelineList>
    <PixipPipe>
      <Active>True</Active>
    </PixipPipe>
    
    <XMASSCallPipe>
      <Active>True</Active>
    </XMASSCallPipe>

    <XMASSFtpPipe>
      <Active>True</Active>
    </XMASSFtpPipe>

    <XMASSHttpPipe>
      <Active>True</Active>
    </XMASSHttpPipe>

    <XMASSSmsPipe>
      <Active>True</Active>
    </XMASSSmsPipe>
  </PipelineList>

  <PixipPipe>
    <!-- Input Adapter -->
    <InputAdapter>
      <PInpAdapter>
        <ClassName>Pixip.PixipBillingDBInputAdapter</ClassName>
        <BatchSize>5000</BatchSize>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select count(*) from mtn_billing_cdr</ValidateStatement>
        <RecordCountStatement>select count(*) from mtn_billing_cdr where FIELD3 is null</RecordCountStatement>
        <InitStatement>update mtn_billing_cdr set FIELD3 = '1' where FIELD3 is null</InitStatement>
        <RecordSelectStatement>select mtn_cdr_id,
                                      ANUMBER,
                                      BNUMBER,
                                      CALL_DATE,
                                      CALL_DURATION,
                                      TELESERVICE_CODE,
                                      TRAFFIC_TYPE,
                                      CHARGE_MAIN_ACCT,
                                      CHARGE_DA1,
                                      DA1_ACCT_BAL_BEFORE_CALL,
                                      DA1_ACCT_BAL_AFTER_CALL
                              from    mtn_billing_cdr
                              where   FIELD3 = '1'
        </RecordSelectStatement>
        <CommitStatement></CommitStatement>
        <RollbackStatement></RollbackStatement>
      </PInpAdapter>
    </InputAdapter>

    <!-- Processing Pipeline -->
    <Process>
      <!-- Perform number normalisation -->
      <PNormalisationLookup>
        <ClassName>Pixip.Normalisation</ClassName>
        <DataCache>NormCache</DataCache>
        <BatchSize>5000</BatchSize>
      </PNormalisationLookup>
      
      <!-- Look up the customer tariff -->
      <PCustomerTariffLookup>
        <ClassName>Pixip.CustomerTariffLookup</ClassName>
        <DataCache>CustomerTariffCache</DataCache>
        <BatchSize>5000</BatchSize>
      </PCustomerTariffLookup>
      
      <!-- Create the charge packets - done here to allow time splitting -->
      <PChargePacketCreation>
        <ClassName>Pixip.ChargePacketCreation</ClassName>
        <BatchSize>5000</BatchSize>
      </PChargePacketCreation>

      <!-- Lookup the time zone -->
      <PTimeMatch>
        <ClassName>Pixip.TimeLookup</ClassName>
        <DataCache>TimeCache</DataCache>
        <BatchSize>5000</BatchSize>
      </PTimeMatch>

      <!-- Lookup the destination -->
      <PZoneDestinationLookup>
        <ClassName>Pixip.ZoneLookup</ClassName>
        <DataCache>ZoneDestinationCache</DataCache>
        <BatchSize>5000</BatchSize>
      </PZoneDestinationLookup>

      <!-- Lookup the price group for the zone and time -->
      <PPriceGroupMatch>
        <ClassName>Pixip.PriceLookup</ClassName>
        <DataCache>PriceCache</DataCache>
        <BatchSize>5000</BatchSize>
      </PPriceGroupMatch>

      <!-- Reduce rateable amount for DISTRIBUTOR PACKAGE, balance 70 -->
      <PPreRatingBalancehandling>
        <ClassName>Pixip.PreRatingBalanceHandling</ClassName>
        <BatchSize>5000</BatchSize>
      </PPreRatingBalancehandling>
      
      <!-- Perform main rating -->
      <PRating>
        <ClassName>Pixip.Rating</ClassName>
        <DataCache>RateCache</DataCache>
        <BatchSize>5000</BatchSize>
      </PRating>

      <!-- roll up impacts -->
      <PRateRounding>
        <ClassName>Pixip.RateRounding</ClassName>
        <BatchSize>5000</BatchSize>
      </PRateRounding>

      <!-- VAT Handling : dropdown  for postpaid -->
      <PVATHandling>
        <ClassName>Pixip.PostPaidVATDropDown</ClassName>
        <BatchSize>5000</BatchSize>
      </PVATHandling>

      <!-- take into account the original value before balances -->
      <PCalculateOriginalCharge>
        <ClassName>Pixip.CalculateOriginalCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </PCalculateOriginalCharge>

      <!-- compare our value with the calculated original value -->
      <PCompareCharge>
        <ClassName>Pixip.CompareCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </PCompareCharge>
      
      <!-- Dump Diagnostic Information -->
      <PDumpFirst>
        <ClassName>OpenRate.process.Dump</ClassName>
        <Active>True</Active>
        <DumpType>All</DumpType>
        <DumpFilePath>Data/Pixip</DumpFilePath>
        <DumpFilePrefix>Billing_</DumpFilePrefix>
        <DumpFileSuffix>.dump</DumpFileSuffix>
        <BatchSize>5000</BatchSize>
      </PDumpFirst>
    </Process>

    <!-- Output Adapters -->
    <OutputAdapter>
      <PGoodOutAdapter>
        <ClassName>Pixip.PixipDBOutputAdapter</ClassName>
        <OutputName>GoodOutput</OutputName>
        <BatchSize>5000</BatchSize>
        <MaxSleep>50</MaxSleep>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select 1 from mtn_billing_cdr</ValidateStatement>
        <InitStatement>select 1 from mtn_billing_cdr</InitStatement>
        <RecordInsertStatement>call sp_UpsertBillingResult(?,?,?)</RecordInsertStatement>
        <!--RecordInsertStatement>update mtn_billing_cdr set FIELD3 = '2', FIELD4 =?, FIELD5 = ? where mtn_cdr_id=?</RecordInsertStatement-->
        <CommitStatement>update mtn_billing_cdr set FIELD3 = '3' where FIELD3 = '2'</CommitStatement>
        <RollbackStatement>update mtn_billing_cdr set FIELD3 = '-1' where FIELD3 = '2'</RollbackStatement>
      </PGoodOutAdapter>
    </OutputAdapter>
  </PixipPipe>

  <XMASSCallPipe>
    <!-- Input Adapter -->
    <InputAdapter>
      <XCInpAdapter>
        <ClassName>Pixip.PixipXMASSCallDBInputAdapter</ClassName>
        <BatchSize>5000</BatchSize>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select count(*) from xmass_or_cdr_call</ValidateStatement>
        <RecordCountStatement>select count(*) from xmass_or_cdr_call where OR_RATE_CONTROL=0</RecordCountStatement>
        <InitStatement>update xmass_or_cdr_call set OR_RATE_CONTROL=1 where OR_RATE_CONTROL=0</InitStatement>
        <RecordSelectStatement>select RESULT_ID,
                                      ANUMBER,
                                      BNUMBER,
                                      START_TIME,
                                      CALL_DURATION,
                                      TELESERVICE_CODE,
                                      TRAFFIC_TYPE,
                                      BALANCE_DIFF,
                                      BALANCE_2_BEFORE,
                                      BALANCE_2_AFTER
                              from    xmass_or_cdr_call
                              where   OR_RATE_CONTROL=1
        </RecordSelectStatement>
        <CommitStatement></CommitStatement>
        <RollbackStatement></RollbackStatement>
      </XCInpAdapter>
    </InputAdapter>

    <!-- Processing Pipeline -->
    <Process>
      <!-- Perform number normalisation -->
      <XCNormalisationLookup>
        <ClassName>Pixip.Normalisation</ClassName>
        <DataCache>NormCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XCNormalisationLookup>
      
      <!-- Look up the customer tariff -->
      <XCCustomerTariffLookup>
        <ClassName>Pixip.CustomerTariffLookup</ClassName>
        <DataCache>CustomerTariffCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XCCustomerTariffLookup>
      
      <!-- Create the charge packets - done here to allow time splitting -->
      <XCChargePacketCreation>
        <ClassName>Pixip.ChargePacketCreation</ClassName>
        <BatchSize>5000</BatchSize>
      </XCChargePacketCreation>

      <!-- Lookup the time zone -->
      <XCTimeMatch>
        <ClassName>Pixip.TimeLookup</ClassName>
        <DataCache>TimeCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XCTimeMatch>

      <!-- Lookup the destination -->
      <XCZoneDestinationLookup>
        <ClassName>Pixip.ZoneLookup</ClassName>
        <DataCache>ZoneDestinationCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XCZoneDestinationLookup>

      <!-- Lookup the price group for the zone and time -->
      <XCPriceGroupMatch>
        <ClassName>Pixip.PriceLookup</ClassName>
        <DataCache>PriceCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XCPriceGroupMatch>

      <!-- workaround for the XMASS tables -->
      <XCSetupDA1XMASS>
        <ClassName>Pixip.SetupDA1XMASS</ClassName>
        <BatchSize>5000</BatchSize>
      </XCSetupDA1XMASS>
      
      <!-- Reduce rateable amount for DISTRIBUTOR PACKAGE, balance 70 -->
      <XCPreRatingBalancehandling>
        <ClassName>Pixip.PreRatingBalanceHandling</ClassName>
        <BatchSize>5000</BatchSize>
      </XCPreRatingBalancehandling>
      
      <!-- Perform main rating -->
      <XCRating>
        <ClassName>Pixip.Rating</ClassName>
        <DataCache>RateCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XCRating>

      <!-- roll up impacts -->
      <XCRateRounding>
        <ClassName>Pixip.RateRounding</ClassName>
        <BatchSize>5000</BatchSize>
      </XCRateRounding>

      <!-- VAT Handling : dropdown  for postpaid -->
      <XCVATHandling>
        <ClassName>Pixip.PostPaidVATDropDown</ClassName>
        <BatchSize>5000</BatchSize>
      </XCVATHandling>

      <!-- take into account the original value before balances -->
      <XCCalculateOriginalCharge>
        <ClassName>Pixip.CalculateOriginalCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </XCCalculateOriginalCharge>

      <!-- compare our value with the calculated original value -->
      <XCCompareCharge>
        <ClassName>Pixip.CompareCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </XCCompareCharge>
      
      <!-- Dump Diagnostic Information -->
      <XCDumpFirst>
        <ClassName>OpenRate.process.Dump</ClassName>
        <Active>True</Active>
        <DumpType>All</DumpType>
        <DumpFilePath>Data/Pixip</DumpFilePath>
        <DumpFilePrefix>XMASS_Call_</DumpFilePrefix>
        <DumpFileSuffix>.dump</DumpFileSuffix>
        <BatchSize>5000</BatchSize>
      </XCDumpFirst>
    </Process>

    <!-- Output Adapters -->
    <OutputAdapter>
      <XCGoodOutAdapter>
        <ClassName>Pixip.PixipDBOutputAdapter</ClassName>
        <OutputName>GoodOutput</OutputName>
        <BatchSize>5000</BatchSize>
        <MaxSleep>50</MaxSleep>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select 1 from xmass_or_cdr_call</ValidateStatement>
        <InitStatement>select 1 from xmass_or_cdr_call</InitStatement>
        <RecordInsertStatement>call sp_UpsertXMASSCallResult(?,?,?)</RecordInsertStatement>
        <CommitStatement>update xmass_or_cdr_call set OR_RATE_CONTROL=3 where OR_RATE_CONTROL=2</CommitStatement>
        <RollbackStatement>update xmass_or_cdr_call set OR_RATE_CONTROL=-1 where OR_RATE_CONTROL=2</RollbackStatement>
      </XCGoodOutAdapter>
    </OutputAdapter>
  </XMASSCallPipe>

  <XMASSFtpPipe>
    <!-- Input Adapter -->
    <InputAdapter>
      <XFInpAdapter>
        <ClassName>Pixip.PixipXMASSCallDBInputAdapter</ClassName>
        <BatchSize>5000</BatchSize>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select count(*) from xmass_or_cdr_ftp</ValidateStatement>
        <RecordCountStatement>select count(*) from xmass_or_cdr_ftp where OR_RATE_CONTROL=0</RecordCountStatement>
        <InitStatement>update xmass_or_cdr_ftp set OR_RATE_CONTROL=1 where OR_RATE_CONTROL=0</InitStatement>
        <RecordSelectStatement>select RESULT_ID,
                                      ANUMBER,
                                      BNUMBER,
                                      START_TIME,
                                      DATA_LENGTH,
                                      TELESERVICE_CODE,
                                      TRAFFIC_TYPE,
                                      BALANCE_DIFF,
                                      BALANCE_2_BEFORE,
                                      BALANCE_2_AFTER
                              from    xmass_or_cdr_ftp
                              where   OR_RATE_CONTROL=1
        </RecordSelectStatement>
        <CommitStatement></CommitStatement>
        <RollbackStatement></RollbackStatement>
      </XFInpAdapter>
    </InputAdapter>

    <!-- Processing Pipeline -->
    <Process>
      <!-- Perform number normalisation -->
      <XFNormalisationLookup>
        <ClassName>Pixip.Normalisation</ClassName>
        <DataCache>NormCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XFNormalisationLookup>
      
      <!-- Look up the customer tariff -->
      <XFCustomerTariffLookup>
        <ClassName>Pixip.CustomerTariffLookup</ClassName>
        <DataCache>CustomerTariffCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XFCustomerTariffLookup>
      
      <!-- Create the charge packets - done here to allow time splitting -->
      <XFChargePacketCreation>
        <ClassName>Pixip.ChargePacketCreation</ClassName>
        <BatchSize>5000</BatchSize>
      </XFChargePacketCreation>

      <!-- Lookup the time zone -->
      <XFTimeMatch>
        <ClassName>Pixip.TimeLookup</ClassName>
        <DataCache>TimeCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XFTimeMatch>

      <!-- Lookup the destination -->
      <XFZoneDestinationLookup>
        <ClassName>Pixip.ZoneLookup</ClassName>
        <DataCache>ZoneDestinationCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XFZoneDestinationLookup>

      <!-- Lookup the price group for the zone and time -->
      <XFPriceGroupMatch>
        <ClassName>Pixip.PriceLookup</ClassName>
        <DataCache>PriceCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XFPriceGroupMatch>

      <!-- workaround for the XMASS tables -->
      <XFSetupDA1XMASS>
        <ClassName>Pixip.SetupDA1XMASS</ClassName>
        <BatchSize>5000</BatchSize>
      </XFSetupDA1XMASS>
      
      <!-- Reduce rateable amount for DISTRIBUTOR PACKAGE, balance 70 -->
      <XFPreRatingBalancehandling>
        <ClassName>Pixip.PreRatingBalanceHandling</ClassName>
        <BatchSize>5000</BatchSize>
      </XFPreRatingBalancehandling>
      
      <!-- Perform main rating -->
      <XFRating>
        <ClassName>Pixip.Rating</ClassName>
        <DataCache>RateCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XFRating>

      <!-- roll up impacts -->
      <XFRateRounding>
        <ClassName>Pixip.RateRounding</ClassName>
        <BatchSize>5000</BatchSize>
      </XFRateRounding>

      <!-- VAT Handling : dropdown  for postpaid -->
      <XFVATHandling>
        <ClassName>Pixip.PostPaidVATDropDown</ClassName>
        <BatchSize>5000</BatchSize>
      </XFVATHandling>

      <!-- take into account the original value before balances -->
      <XFCalculateOriginalCharge>
        <ClassName>Pixip.CalculateOriginalCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </XFCalculateOriginalCharge>

      <!-- compare our value with the calculated original value -->
      <XFCompareCharge>
        <ClassName>Pixip.CompareCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </XFCompareCharge>
      
      <!-- Dump Diagnostic Information -->
      <XFDumpFirst>
        <ClassName>OpenRate.process.Dump</ClassName>
        <Active>True</Active>
        <DumpType>All</DumpType>
        <DumpFilePath>Data/Pixip</DumpFilePath>
        <DumpFilePrefix>XMASS_Ftp_</DumpFilePrefix>
        <DumpFileSuffix>.dump</DumpFileSuffix>
        <BatchSize>5000</BatchSize>
      </XFDumpFirst>
    </Process>

    <!-- Output Adapters -->
    <OutputAdapter>
      <XFGoodOutAdapter>
        <ClassName>Pixip.PixipDBOutputAdapter</ClassName>
        <OutputName>GoodOutput</OutputName>
        <BatchSize>5000</BatchSize>
        <MaxSleep>50</MaxSleep>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select 1 from xmass_or_cdr_ftp</ValidateStatement>
        <InitStatement>select 1 from xmass_or_cdr_ftp</InitStatement>
        <RecordInsertStatement>call sp_UpsertXMASSFtpResult(?,?,?)</RecordInsertStatement>
        <CommitStatement>update xmass_or_cdr_ftp set OR_RATE_CONTROL=3 where OR_RATE_CONTROL=2</CommitStatement>
        <RollbackStatement>update xmass_or_cdr_ftp set OR_RATE_CONTROL=-1 where OR_RATE_CONTROL=2</RollbackStatement>
      </XFGoodOutAdapter>
    </OutputAdapter>
  </XMASSFtpPipe>

  <XMASSHttpPipe>
    <!-- Input Adapter -->
    <InputAdapter>
      <XHInpAdapter>
        <ClassName>Pixip.PixipXMASSCallDBInputAdapter</ClassName>
        <BatchSize>5000</BatchSize>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select count(*) from xmass_or_cdr_http</ValidateStatement>
        <RecordCountStatement>select count(*) from xmass_or_cdr_http where OR_RATE_CONTROL=0</RecordCountStatement>
        <InitStatement>update xmass_or_cdr_http set OR_RATE_CONTROL=1 where OR_RATE_CONTROL=0</InitStatement>
        <RecordSelectStatement>select RESULT_ID,
                                      ANUMBER,
                                      BNUMBER,
                                      START_TIME,
                                      DATA_LENGTH,
                                      TELESERVICE_CODE,
                                      TRAFFIC_TYPE,
                                      BALANCE_DIFF,
                                      BALANCE_2_BEFORE,
                                      BALANCE_2_AFTER
                              from    xmass_or_cdr_http
                              where   OR_RATE_CONTROL=1
        </RecordSelectStatement>
        <CommitStatement></CommitStatement>
        <RollbackStatement></RollbackStatement>
      </XHInpAdapter>
    </InputAdapter>

    <!-- Processing Pipeline -->
    <Process>
      <!-- Perform number normalisation -->
      <XHNormalisationLookup>
        <ClassName>Pixip.Normalisation</ClassName>
        <DataCache>NormCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XHNormalisationLookup>
      
      <!-- Look up the customer tariff -->
      <XHCustomerTariffLookup>
        <ClassName>Pixip.CustomerTariffLookup</ClassName>
        <DataCache>CustomerTariffCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XHCustomerTariffLookup>
      
      <!-- Create the charge packets - done here to allow time splitting -->
      <XHChargePacketCreation>
        <ClassName>Pixip.ChargePacketCreation</ClassName>
        <BatchSize>5000</BatchSize>
      </XHChargePacketCreation>

      <!-- Lookup the time zone -->
      <XHTimeMatch>
        <ClassName>Pixip.TimeLookup</ClassName>
        <DataCache>TimeCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XHTimeMatch>

      <!-- Lookup the destination -->
      <XHZoneDestinationLookup>
        <ClassName>Pixip.ZoneLookup</ClassName>
        <DataCache>ZoneDestinationCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XHZoneDestinationLookup>

      <!-- Lookup the price group for the zone and time -->
      <XHPriceGroupMatch>
        <ClassName>Pixip.PriceLookup</ClassName>
        <DataCache>PriceCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XHPriceGroupMatch>

      <!-- workaround for the XMASS tables -->
      <XHSetupDA1XMASS>
        <ClassName>Pixip.SetupDA1XMASS</ClassName>
        <BatchSize>5000</BatchSize>
      </XHSetupDA1XMASS>
      
      <!-- Reduce rateable amount for DISTRIBUTOR PACKAGE, balance 70 -->
      <XHPreRatingBalancehandling>
        <ClassName>Pixip.PreRatingBalanceHandling</ClassName>
        <BatchSize>5000</BatchSize>
      </XHPreRatingBalancehandling>
      
      <!-- Perform main rating -->
      <XHRating>
        <ClassName>Pixip.Rating</ClassName>
        <DataCache>RateCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XHRating>

      <!-- roll up impacts -->
      <XHRateRounding>
        <ClassName>Pixip.RateRounding</ClassName>
        <BatchSize>5000</BatchSize>
      </XHRateRounding>

      <!-- VAT Handling : dropdown  for postpaid -->
      <XHVATHandling>
        <ClassName>Pixip.PostPaidVATDropDown</ClassName>
        <BatchSize>5000</BatchSize>
      </XHVATHandling>

      <!-- take into account the original value before balances -->
      <XHCalculateOriginalCharge>
        <ClassName>Pixip.CalculateOriginalCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </XHCalculateOriginalCharge>

      <!-- compare our value with the calculated original value -->
      <XHCompareCharge>
        <ClassName>Pixip.CompareCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </XHCompareCharge>
      
      <!-- Dump Diagnostic Information -->
      <XHDumpFirst>
        <ClassName>OpenRate.process.Dump</ClassName>
        <Active>True</Active>
        <DumpType>All</DumpType>
        <DumpFilePath>Data/Pixip</DumpFilePath>
        <DumpFilePrefix>XMASS_Http_</DumpFilePrefix>
        <DumpFileSuffix>.dump</DumpFileSuffix>
        <BatchSize>5000</BatchSize>
      </XHDumpFirst>
    </Process>

    <!-- Output Adapters -->
    <OutputAdapter>
      <XHGoodOutAdapter>
        <ClassName>Pixip.PixipDBOutputAdapter</ClassName>
        <OutputName>GoodOutput</OutputName>
        <BatchSize>5000</BatchSize>
        <MaxSleep>50</MaxSleep>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select 1 from xmass_or_cdr_http</ValidateStatement>
        <InitStatement>select 1 from xmass_or_cdr_http</InitStatement>
        <RecordInsertStatement>call sp_UpsertXMASSHttpResult(?,?,?)</RecordInsertStatement>
        <CommitStatement>update xmass_or_cdr_http set OR_RATE_CONTROL=3 where OR_RATE_CONTROL=2</CommitStatement>
        <RollbackStatement>update xmass_or_cdr_http set OR_RATE_CONTROL=-1 where OR_RATE_CONTROL=2</RollbackStatement>
      </XHGoodOutAdapter>
    </OutputAdapter>
  </XMASSHttpPipe>

  <XMASSSmsPipe>
    <!-- Input Adapter -->
    <InputAdapter>
      <XSInpAdapter>
        <ClassName>Pixip.PixipXMASSCallDBInputAdapter</ClassName>
        <BatchSize>5000</BatchSize>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select count(*) from xmass_or_cdr_sms</ValidateStatement>
        <RecordCountStatement>select count(*) from xmass_or_cdr_sms where OR_RATE_CONTROL=0</RecordCountStatement>
        <InitStatement>update xmass_or_cdr_sms set OR_RATE_CONTROL=1 where OR_RATE_CONTROL=0</InitStatement>
        <RecordSelectStatement>select RESULT_ID,
                                      ANUMBER,
                                      BNUMBER,
                                      START_TIME,
                                      CALL_DURATION,
                                      TELESERVICE_CODE,
                                      TRAFFIC_TYPE,
                                      BALANCE_DIFF,
                                      BALANCE_2_BEFORE,
                                      BALANCE_2_AFTER
                              from    xmass_or_cdr_sms
                              where   OR_RATE_CONTROL=1
        </RecordSelectStatement>
        <CommitStatement></CommitStatement>
        <RollbackStatement></RollbackStatement>
      </XSInpAdapter>
    </InputAdapter>

    <!-- Processing Pipeline -->
    <Process>
      <!-- Perform number normalisation -->
      <XSNormalisationLookup>
        <ClassName>Pixip.Normalisation</ClassName>
        <DataCache>NormCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XSNormalisationLookup>
      
      <!-- Look up the customer tariff -->
      <XSCustomerTariffLookup>
        <ClassName>Pixip.CustomerTariffLookup</ClassName>
        <DataCache>CustomerTariffCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XSCustomerTariffLookup>
      
      <!-- Create the charge packets - done here to allow time splitting -->
      <XSChargePacketCreation>
        <ClassName>Pixip.ChargePacketCreation</ClassName>
        <BatchSize>5000</BatchSize>
      </XSChargePacketCreation>

      <!-- Lookup the time zone -->
      <XSTimeMatch>
        <ClassName>Pixip.TimeLookup</ClassName>
        <DataCache>TimeCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XSTimeMatch>

      <!-- Lookup the destination -->
      <XSZoneDestinationLookup>
        <ClassName>Pixip.ZoneLookup</ClassName>
        <DataCache>ZoneDestinationCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XSZoneDestinationLookup>

      <!-- Lookup the price group for the zone and time -->
      <XSPriceGroupMatch>
        <ClassName>Pixip.PriceLookup</ClassName>
        <DataCache>PriceCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XSPriceGroupMatch>

      <!-- workaround for the XMASS tables -->
      <XSSetupDA1XMASS>
        <ClassName>Pixip.SetupDA1XMASS</ClassName>
        <BatchSize>5000</BatchSize>
      </XSSetupDA1XMASS>
      
      <!-- Reduce rateable amount for DISTRIBUTOR PACKAGE, balance 70 -->
      <XSPreRatingBalancehandling>
        <ClassName>Pixip.PreRatingBalanceHandling</ClassName>
        <BatchSize>5000</BatchSize>
      </XSPreRatingBalancehandling>
      
      <!-- Perform main rating -->
      <XSRating>
        <ClassName>Pixip.Rating</ClassName>
        <DataCache>RateCache</DataCache>
        <BatchSize>5000</BatchSize>
      </XSRating>

      <!-- roll up impacts -->
      <XSRateRounding>
        <ClassName>Pixip.RateRounding</ClassName>
        <BatchSize>5000</BatchSize>
      </XSRateRounding>

      <!-- VAT Handling : dropdown  for postpaid -->
      <XSVATHandling>
        <ClassName>Pixip.PostPaidVATDropDown</ClassName>
        <BatchSize>5000</BatchSize>
      </XSVATHandling>

      <!-- take into account the original value before balances -->
      <XSCalculateOriginalCharge>
        <ClassName>Pixip.CalculateOriginalCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </XSCalculateOriginalCharge>

      <!-- compare our value with the calculated original value -->
      <XSCompareCharge>
        <ClassName>Pixip.CompareCharge</ClassName>
        <BatchSize>5000</BatchSize>
      </XSCompareCharge>
      
      <!-- Dump Diagnostic Information -->
      <XSDumpFirst>
        <ClassName>OpenRate.process.Dump</ClassName>
        <Active>True</Active>
        <DumpType>All</DumpType>
        <DumpFilePath>Data/Pixip</DumpFilePath>
        <DumpFilePrefix>XMASS_Sms_</DumpFilePrefix>
        <DumpFileSuffix>.dump</DumpFileSuffix>
        <BatchSize>5000</BatchSize>
      </XSDumpFirst>
    </Process>

    <!-- Output Adapters -->
    <OutputAdapter>
      <XSGoodOutAdapter>
        <ClassName>Pixip.PixipDBOutputAdapter</ClassName>
        <OutputName>GoodOutput</OutputName>
        <BatchSize>5000</BatchSize>
        <MaxSleep>50</MaxSleep>
        <DataSource>mtn_poc_db</DataSource>
        <ValidateStatement>select 1 from xmass_or_cdr_sms</ValidateStatement>
        <InitStatement>select 1 from xmass_or_cdr_sms</InitStatement>
        <RecordInsertStatement>call sp_UpsertXMASSSmsResult(?,?,?)</RecordInsertStatement>
        <CommitStatement>update xmass_or_cdr_sms set OR_RATE_CONTROL=3 where OR_RATE_CONTROL=2</CommitStatement>
        <RollbackStatement>update xmass_or_cdr_sms set OR_RATE_CONTROL=-1 where OR_RATE_CONTROL=2</RollbackStatement>
      </XSGoodOutAdapter>
    </OutputAdapter>
  </XMASSSmsPipe>

  <Resource>
    <LogFactory>
      <ClassName>OpenRate.logging.LogFactory</ClassName>
      <Properties>logPixip.xml</Properties>
      <DefaultCategory>ConfigTest</DefaultCategory>
    </LogFactory>

    <ECI>
      <ClassName>OpenRate.configurationmanager.EventHandler</ClassName>
      <Port>8086</Port>
      <MaxConnection>2</MaxConnection>
      <SemaphoreFile>Semaphore/Semaphore.txt</SemaphoreFile>
    </ECI>

    <TransactionManagerFactory>
      <ClassName>OpenRate.transaction.TransactionManagerFactory</ClassName>
    </TransactionManagerFactory>

    <!-- Conversion Cache allows us to cache heavy coversion objects -->
    <ConversionCache>
      <ClassName>OpenRate.resource.ConversionCache</ClassName>
    </ConversionCache>

    <DataSourceFactory>
      <ClassName>OpenRate.resource.DataSourceFactory</ClassName>
      <DataSourceBuilder>
        <ClassName>OpenRate.db.C3P0DataSource</ClassName>
      </DataSourceBuilder>
      
      <DataSource>
        <mtn_poc_db>
          <db_url>jdbc:mysql://localhost/mtn_poc</db_url>
          <driver>com.mysql.jdbc.Driver</driver>
          <username>openrate</username>
          <password>openrate</password>
          <ValidationQuery>select 1 from dual</ValidationQuery>
          <InitQuery>select 1 from dual</InitQuery>
          <TestConnectionPeriod>60</TestConnectionPeriod>
        </mtn_poc_db>
      
        <PixipDB>
          <db_url>jdbc:mysql://localhost/PixipDB</db_url>
          <driver>com.mysql.jdbc.Driver</driver>
          <username>openrate</username>
          <password>openrate</password>
          <ValidationQuery>select 1 from dual</ValidationQuery>
          <InitQuery>select 1 from dual</InitQuery>
          <TestConnectionPeriod>60</TestConnectionPeriod>
        </PixipDB>
      </DataSource>
    </DataSourceFactory>

    <CacheFactory>
      <ClassName>OpenRate.resource.CacheFactory</ClassName>
      <ModuleName>CacheFactory</ModuleName>
      <CacheableClass>
        <!-- Number normalisation rules -->
        <NormCache>
          <ClassName>OpenRate.cache.RegexMatchCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <SelectStatement>select MAP_GROUP,BAND,NUMBER,OLD_PREFIX,NEW_PREFIX from NORM_MAP order by RANK</SelectStatement>
          <KeyFields>2</KeyFields>
        </NormCache>

        <!-- Number zoning -->
        <ZoneDestinationCache>
          <ClassName>OpenRate.cache.BestMatchCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <SelectStatement>SELECT MAP_GROUP, PREFIX, ZONE_RESULT, DESCRIPTION, CATEGORY FROM DESTINATION_MAP</SelectStatement>
        </ZoneDestinationCache>

        <!-- MSISDN -> tariff -->
        <CustomerTariffCache>
          <ClassName>OpenRate.cache.RegexMatchCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>mtn_poc_db</DataSource>
          <SelectStatement>select 'Default',MSISDN,SERVICE_CLASS_PACKAGE,DA1_TYPE_ID from mtn_msisdn_plan</SelectStatement>
          <KeyFields>1</KeyFields>
        </CustomerTariffCache>

        <!-- Time zoning -->
        <TimeCache>
          <ClassName>OpenRate.cache.TimeModelCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <ModelSelectStatement>select TIME_MODEL_NAME_IN,DAY_IN,FROM_IN,TO_IN,RESULT_OUT from TIME_MODEL_INTERVAL</ModelSelectStatement>
          <MappingSelectStatement>select PRODUCT_NAME_IN,TIME_MODEL_OUT from TIME_MODEL_MAP</MappingSelectStatement>
       </TimeCache>

        <!-- Price allocations -->
       <PriceCache>
          <ClassName>OpenRate.cache.RegexMatchCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <SelectStatement>select MAP_GROUP,SERVICE,ORIGIN_ZONE,DEST_ZONE,ZONE_RESULT,TIME_RESULT,PRICE_GROUP from PRICE_MAP</SelectStatement>
          <KeyFields>5</KeyFields>
        </PriceCache>

        <!-- Pricing definitions for normal rating -->
        <RateCache>
          <ClassName>OpenRate.cache.RUMRateCache</ClassName>
          <DataSourceType>DB</DataSourceType>
          <DataSource>PixipDB</DataSource>
          <PriceModelStatement>select PRICE_MODEL,STEP,TIER_FROM,TIER_TO,BEAT,FACTOR,CHARGE_BASE from PRICE_MODEL</PriceModelStatement>
          <RUMMapStatement>select PRICE_GROUP,PRICE_MODEL,RUM,RESOURCE,RUM_TYPE,RESOURCE_ID from RUM_MAP order by STEP</RUMMapStatement>
        </RateCache>

      </CacheableClass>
    </CacheFactory>

  </Resource>
</config>
